<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
	PUBLIC "-//mybatis.org//DTD mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	
<mapper namespace="ProductDAO">
	<!-- 메뉴 리스트에서 선택된 카테고리에 해당하는 제품 리스트 조회 -->
	<select id="getCategoryProductList" parameterType="int" resultType="camelHashMap">
		<![CDATA[
			SELECT * 
			  FROM T_SGJ_PRDCT A, T_SGJ_PRDCT_DETAIL B, T_SGJ_CATEGORY C, T_SGJ_IMAGE D
			 WHERE A.PRDCT_NO = B.PRDCT_NO
			   AND B.PRDCT_CATEGORY_CD = C.CATEGORY_CD
			   AND B.PRDCT_NO = D.PRDCT_NO
			   AND B.PRDCT_DETAIL_NO = D.PRDCT_DETAIL_NO
		]]>
		<if test="categoryCd != 1">
			AND B.PRDCT_CATEGORY_CD = #{categoryCd}
		</if>
	</select>

	<!-- 카테고리 정보 조회 -->
	<select id="getCategoryInfo" parameterType="int" resultType="camelHashMap">
		<![CDATA[
			SELECT * 
			  FROM T_SGJ_CATEGORY
			 WHERE CATEGORY_CD = #{categoryCd}
		]]>
	</select>	
	
	<!-- 카테고리 리스트 조회 -->
	<select id="getCategoryList" resultType="camelHashMap">
		<![CDATA[
			SELECT * 
			  FROM T_SGJ_CATEGORY
		]]>
	</select>
	
	<!-- 
		인기제품 TOP5 조회
		-> 주문내역이 많은 제품 순으로 TOP 5
	-->
	<select id="getPopularProductList" resultType="camelHashMap">
		<![CDATA[
			SELECT A.PRDCT_NO, B.PRDCT_DETAIL_NO, A.PRDCT_NM, B.PRDCT_SIZE, B.PRDCT_PRICE
			  FROM T_SGJ_PRDCT A, T_SGJ_PRDCT_DETAIL B
			  JOIN (SELECT B.PRDCT_NO, B.PRDCT_DETAIL_NO, COUNT(B.PRDCT_NO) AS "ORDER_CNT"
					  FROM T_SGJ_ORDER A, T_SGJ_ORDER_ITEM B
					 WHERE A.ORDER_NO = B.ORDER_NO
					 GROUP BY B.PRDCT_NO, B.PRDCT_DETAIL_NO) C ON B.PRDCT_NO = C.PRDCT_NO
															  AND B.PRDCT_DETAIL_NO = C.PRDCT_DETAIL_NO
			 WHERE A.PRDCT_NO = B.PRDCT_NO
			 ORDER BY C.ORDER_CNT DESC
			 LIMIT 5
		]]>
	</select>
	
	<!-- 
		신제품 조회
		-> 현재일자를 기준으로 이전 일주일까지 등록된 제품을 신제품으로 간주!
		-> 마스터 테이블의 등록일자를 기준으로 할 것인지, 아님 디테일 테이블의 등록일자를 할 것인지 고민..
	-->
	<select id="getNewProductList" resultType="camelHashMap">
		<![CDATA[
			SELECT A.PRDCT_NO, B.PRDCT_DETAIL_NO, A.PRDCT_NM, B.PRDCT_SIZE, B.PRDCT_PRICE
			  FROM T_SGJ_PRDCT A, T_SGJ_PRDCT_DETAIL B
			  JOIN (SELECT B.PRDCT_NO, B.PRDCT_DETAIL_NO, COUNT(B.PRDCT_NO) AS "ORDER_CNT"
					  FROM T_SGJ_ORDER A, T_SGJ_ORDER_ITEM B
					 WHERE A.ORDER_NO = B.ORDER_NO
					 GROUP BY B.PRDCT_NO, B.PRDCT_DETAIL_NO) C ON B.PRDCT_NO = C.PRDCT_NO
															  AND B.PRDCT_DETAIL_NO = C.PRDCT_DETAIL_NO
			 WHERE A.PRDCT_NO = B.PRDCT_NO
			 ORDER BY C.ORDER_CNT DESC
			 LIMIT 5
		]]>
	</select>

	<!-- 제품 등록 -->
	<insert id="insertProduct" parameterType="map">
		INSERT INTO T_SGJ_PRDCT
			(
				PRDCT_NO
				,PRDCT_NM
				,PRDCT_RGST_DATE
				,PRDCT_USE_YN
			)
		VALUES(
				#{prdctNo}
				,#{prdctNm}
				,now()
				,'Y'
			)
	</insert>
			
	<insert id="insertProductDetail" parameterType="map">
		INSERT INTO T_SGJ_PRDCT_DETAIL
			(
				PRDCT_NO
				,PRDCT_DETAIL_NO 
				,PRDCT_CATEGORY_CD
				,PRDCT_SIZE 
				,PRDCT_COLOR
				,PRDCT_MATERIAL
				,PRDCT_PRICE
				,PRDCT_REMAIN
				,PRDCT_DETAIL_RGST_DATE
				,PRDCT_MODF_DATE
				,PRDCT_DETAIL_USE_YN
			)
		VALUES(
				#{prdctNo}
				,(
					SELECT IFNULL(MAX(PRDCT_DETAIL_NO), 0) + 1 
						FROM PRDCT_DETAIL_NO
						WHERE PRDCT_NO = #{prdctNo}
				 )
				,#{prdctCategoryCd}
				,#{prdctSize}
				,#{prdctColor}
				,#{prdctMaterial}
				,#{prdctPrice}
				,#{prdctRemain}
				,now()
				,now()
				,'Y'				
			)
	</insert>
	
	<!-- 제품 수정 -->
	<update id="updateProduct" parameterType="map">
		UPDATE T_SGJ_PRDCT
		SET PRDCT_NM = #{prdctNm}		
		WHERE PRDCT_NO = #{prdctNo}
		
			
	  	UPDATE T_SGJ_PRDCT_DETAIL
		SET PRDCT_SIZE = #{prdctSize}
			,PRDCT_COLOR = #{prdctColor}
			,PRDCT_MATERIAL = #{prdctMaterial}
			,PRDCT_PRICE = #{prdctPrice}
			,PRDCT_REMAIN = #{prdctRemain}
			,PRDCT_MODF_DATE = NOW()
		WHERE PRDCT_NO = #{prdctNo}
		AND	  PRDCT_DETAIL_NO = #{prdctDetailNo}
	</update>
	
	<!-- 제품 삭제 -->
	<update id="useYnProduct" parameterType="map">
		UPDATE T_SGJ_PRDCT
		SET PRDCT_USE_YN = #{prdctUseYn}		
		WHERE PRDCT_NO = #{prdctNo}
		
	  	UPDATE T_SGJ_PRDCT_DETAIL
		SET PRDCT_USE_YN = #{prdctUseYn}
		WHERE PRDCT_NO = #{prdctNo}
		AND	  PRDCT_DETAIL_NO = #{prdctDetailNo}
	</update>
</mapper>